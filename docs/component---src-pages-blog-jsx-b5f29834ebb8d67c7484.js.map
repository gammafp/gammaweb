{"version":3,"sources":["webpack:///./src/components/BlogList/BlogList.jsx","webpack:///./src/pages/blog.jsx"],"names":["BlogList","posts","postsInIndexPage","i18n","useTranslation","posts_lang","filter","edge","i","node","fields","slug","startsWith","language","useEffect","Observer","emit","GLOBAL_EVENT","INDEX_POSTS_LOADED","className","map","post","excerpt","frontmatter","description","tags","console","log","cover","publicURL","tag","key","title","BlogPage","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","edges","pageQuery"],"mappings":"4KA2CeA,IAnCE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBACjBC,EAASC,cAATD,KACFE,EAAaJ,EAAMK,QAAO,SAACC,EAAMC,GACrC,OAAQD,EAAKE,KAAKC,OAAOC,KAAKC,WAAtB,IAAqCT,EAAKU,SAA1C,QAOV,OAJAC,qBAAU,WACRC,IAASC,KAAKC,IAAaC,uBAI3B,yBAAKC,UAAU,uCAEXd,EAAWe,KAAI,SAACC,EAAMb,GACpB,IAAMC,EAAOY,EAAKZ,KACZa,EAA4C,OAAjCb,EAAKc,YAAYC,YAAwBf,EAAKc,YAAYC,YAAcf,EAAKa,QAC9F,GAA8B,OAA1Bb,EAAKc,YAAYE,MAAiBjB,EAAIN,EAAkB,CAC1DwB,QAAQC,IAAI,qBAAuBlB,EAAKc,YAAYK,OAASnB,EAAKc,YAAYK,MAAMC,WACpF,IAAMC,EAAMrB,EAAKc,YAAYE,KAAK,GAClC,OAAO,kBAAC,IAAD,CAAMN,UAAU,4BAA4BY,IAAKvB,EACpDG,KAAMF,EAAKC,OAAOC,KAClBqB,MAAOvB,EAAKc,YAAYS,MACxBV,QAASA,EACTQ,IAAKA,EACLF,MAAOnB,EAAKc,YAAYK,OAASnB,EAAKc,YAAYK,MAAMC,YAG5D,OAAO,W,oCCnCnB,0HAmBeI,UAZE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAChBC,EAAYF,EAAKG,KAAKC,aAAaN,MACnC/B,EAAQiC,EAAKK,kBAAkBC,MACrC,OACI,kBAAC,IAAD,CAAQL,SAAUA,EAAUH,MAAOI,GAC/B,kBAAC,IAAD,CAAKJ,MAAM,SACX,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAU/B,MAAOA,EAAOC,iBAAkB,QAO/C,IAAMuC,EAAS","file":"component---src-pages-blog-jsx-b5f29834ebb8d67c7484.js","sourcesContent":["// Componente para mostrar un nÃºmero de posts determinado\r\nimport React, { useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Observer, GLOBAL_EVENT } from '../../Observer';\r\n\r\nimport './BlogList.scss';\r\n\r\nconst BlogList = ({ posts, postsInIndexPage }) => {\r\n  const { i18n } = useTranslation();\r\n  const posts_lang = posts.filter((edge, i) => {\r\n    return (edge.node.fields.slug.startsWith(`/${i18n.language}/`));\r\n  });\r\n\r\n  useEffect(() => {\r\n    Observer.emit(GLOBAL_EVENT.INDEX_POSTS_LOADED);\r\n  })\r\n\r\n  return (\r\n    <div className=\"text-center mt-3 blogList container\">\r\n      {\r\n        posts_lang.map((post, i) => {\r\n          const node = post.node;\r\n          const excerpt = (node.frontmatter.description !== null) ? node.frontmatter.description : node.excerpt;\r\n          if (node.frontmatter.tags !== null && i < postsInIndexPage) {\r\n            console.log('Cover @@@@@@@@@@: ', (node.frontmatter.cover && node.frontmatter.cover.publicURL));\r\n            const tag = node.frontmatter.tags[0];\r\n            return <Card className=\"mx-0 mx-sm-2 my-1 my-sm-3\" key={i}\r\n                slug={node.fields.slug}\r\n                title={node.frontmatter.title}\r\n                excerpt={excerpt}\r\n                tag={tag}\r\n                cover={node.frontmatter.cover && node.frontmatter.cover.publicURL}\r\n              />;\r\n          } else {\r\n            return null;\r\n          }\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlogList;\r\n","import React from 'react';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\nimport { Header } from '../components/Header/Header';\r\nimport { graphql } from 'gatsby';\r\nimport BlogList from '../components/BlogList/BlogList';\r\n\r\nconst BlogPage = ({ data, location }) => {\r\n    const siteTitle = data.site.siteMetadata.title;\r\n    const posts = data.allMarkdownRemark.edges;\r\n    return (\r\n        <Layout location={location} title={siteTitle}>\r\n            <SEO title=\"Blog\" />\r\n            <Header />\r\n            <BlogList posts={posts} postsInIndexPage={1000}/>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default BlogPage;\r\n\r\nexport const pageQuery = graphql`\r\nquery {\r\n  site {\r\n    siteMetadata {\r\n      title\r\n      postsInIndexPage\r\n    }\r\n  }\r\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n    edges {\r\n      node {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n          tags\r\n          cover {\r\n            publicURL\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n"],"sourceRoot":""}